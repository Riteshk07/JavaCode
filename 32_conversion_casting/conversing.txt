class A {




	public static void main (String[]args){
		int x = 20; // 20 is an int constant 

		char y = 'A';  // 'A' is a char constant

		float z = 2.3f;  // 2.3f is a float constant 

		//  the type of the value and type of the variable is 
		// same thus no conversion required 
	}
}

class A{
	public static void main (String [] args){
		int x = 'A';
		// int <--char ---- type missmatched thus conversion required 
		// widening/ narrowing conversion? ----> widenning
		//int(-2147483648 to 2147483647) vs. char(0-65535)
        	//Auto/Forced conversion? ---> Auto(because widenning conversion and no risk)

		System.out.println(x);		
	}
}


class A{
	public static void main (String [] args){
		int x = 2.3f;
		// int <--float ---- type missmatched thus conversion required 
		// convertible--> yes
		// widening/ narrowing conversion? ----> narrowing
		//int(-2147483648 to 2147483647) vs. float(3.4e−038 to 3.4e+038)
        	//Auto/Forced conversion? ---> forced(because narrowing conversion and there is risk associated...)
        	//forced conversion must be done by the developer ....
        	//how? using type-cast (<type>) oerator...

		System.out.println(x);
		
	}
}

class A{
	public static void main (String[]args){
		int x = (int)2.3f;
		// int <--float ---- type missmatched thus conversion required 
		// convertible--> yes
		// widening/ narrowing conversion? ----> narrowing
		//int(-2147483648 to 2147483647) vs. float(3.4e−038 to 3.4e+038)
        	//Auto/Forced conversion? ---> forced(because narrowing conversion and there is risk associated...)
        	//forced conversion must be done by the developer ....
        	//how? using type-cast (<type>) oerator...

		System.out.println(x);	
	}
}

class A{
	public static void main(String[]args){
		boolean x = 0;
		// boolean <-- int --- type mismatched thus conversion required 
		//  convertible? --> no
		System.out.println(x);
	} 
}

class A{
	public static void main (String[]args){
		byte b = 20;
		short s = 200;
		char c = 2000;

		System.out.println(b);
		System.out.println(s);
		System.out.println(c);

		// type casting exempted because the value assingned using assingnment operator
		// and the value is constant value with in range of the variable type  
	}
}

class A{
	public static void main (String []args ){
		int x = 1;

		byte b = x;
		short s = x;
		char c = x;

		System.out.println(b);
		System.out.println(s);
		System.out.println(c);

		// type casting exempted because the value assingned using assingnment operator
		// and the value is constant value with in range of the variable type  

	}
//error: incompatible types: possible lossy conversion from int to byte/short/char
}

class A{
	public static void main (String []args){
				int x = 1;

		byte b = (byte)x;
		short s = (short)x;
		char c = (char)x;

		System.out.println(b);
		System.out.println(s);
		System.out.println(c);

		// type casting exempted because the value assingned using assingnment operator
		// and the value is constant value with in range of the variable type  
		
	}
}


class A{
	public static void main (String [] args){

		byte b = 128;
		short s = 32768;
		char c = -1;

		System.out.println(b);
		System.out.println(s);
		System.out.println(c);

		// type casting exempted because the value assingned using assingnment operator
		// and the value is constant value with in range of the variable type  

	}
//error: incompatible types: possible lossy conversion from int to byte/short/char
}


class A{
	public static void main (String[]args){
		byte b = (byte)128;
		short = (short)32768;
		char = (char)-1;

		System.out.println(b);
		System.out.println(s);
		System.out.println(c);

		// type casting exempted because the value assingned using assingnment operator
		// and the value is constant value with in range of the variable type  
	}
}

class A {
	public static void main (String []args){
		byte x = 127;
		byte x = (byte)128;

		byte x = (byte)-134;

		System.out.println(x);
	}
}


short -32768 to 32767
class A{
	public static void main (Stirng [] args){
		// short s = 32767;
		short s = 32770;
		short s = (short)32770;
		short s = (short)-32772;
		System.out.println(s);
	}
}

class A{
	public static void main (String []args){
		char x =65535;
		char x =65540;
		char x =(char)65540;
		char x =(char)-5;

		System.out.println((int)x)
	}
}

class A{
	public static void main (String[]args){
		int a = 2;
		pro(a);
		pro((byte)a);
		pro((byte)3);
	}
	static void pro(byte x){
		System.out.println(x);
	}
}

class A{
	public static void main (String[]args){
		byte = pro();
	}
	static byte pro(){
		int a = 2;
		return a;
	}
}


class A{
	public static void main (String[]args){
		byte = pro();
	}
	static byte pro(){
		int a = 4;
		return (byte)a;
	}
}

class A{
	public static void main (String[]args){
		byte = pro();
	}
	static byte pro(){
		int a = 2;
		return 2;
	}
}

class A{
	public static void main (String []args){
		byte  a= 2;
		char x = a;

		char x = (char)a;
	}
}

class A{
	public static void main (String[]args){
		char x = 1;

		byte y = x;

		byte y = (byte)y;
	}
}


class A{
	public static void main(String[]args){
		short a = 2;

		char y = a;
		char y = (char)a;
	}
}


class A{
	public static void main(String[]args){

		char y = 3;
		short t =y;
		short t = (short)y;
	}
}


class A{
	public static void main (String[]args){
		byte a = 56;
		short b = a;
		System.out.println(b);
	}
}


class A{
	public static void main (String[]args){
		byte a = 1;
		byte b = 1;

		short x = a+b;		
	}
}


class A{
	public static void main (String[]args){
		byte a = 1;
		byte b = 1;

		short x = (short)(a+b);		
	}
}

class A{
	public static void main (String[]args){
		char a = 1;
		byte b = 1;

		short x = a+b;		
	}
}
//***************************************************************
classA{
	public static void main (String[]args){
		double x = 'A';
		
	}
}
//**************************************************************
class A{
	public static void main (String[]args){
		LivingBeing x = new BDog();
		System.out.println(x);
	}
}

class Animal extends LivingBeing{
	
}

livingBeing{
	
}
class Cat extends Animal{

}
class Dog extends Animal{

} 
class Cow extends Animal{

}
class Bdog  extends Animal{

}
//**************************************************************
class A{
	public static void main (String[]args){
		LivingBeing x = new BDog();
		BDog y = (BDog)x;
		System.out.println(y);
	}
}

class Animal extends LivingBeing{
	
}

livingBeing{
	
}
class Cat extends Animal{

}
class Dog extends Animal{

} 
class Cow extends Animal{

}
class Bdog  extends Animal{
	void pro(){
		System.out.println("this is BDog");
	}
}

//********************************************************
class A{
	void pro(){
		System.out.println("pro In A");
	}
}

class B{
	void info(){
		System.out.println("info in B");
	}
}
class X{
	public static void main (String[]args){
		A x = new B();
		System.out.println(x.toString());

		x.pro();
		x.info();
	}
}


class A{
	void pro(){
		System.out.println("pro In A");
	}
}

class B{
	void info(){
		System.out.println("info in B");
	}
}
class X{
	public static void main (String[]args){
		A x = new B();
		System.out.println(x.toString());

		x.pro();
		x.info();

		B t = x;
		t.info();
	}
}


class A{
	void pro(){
		System.out.println("pro In A");
	}
}

class B{
	void info(){
		System.out.println("info in B");
	}
}
class X{
	public static void main (String[]args){
		A x = new B();
		System.out.println(x.toString());

		x.pro();
		x.info();

		B t = (B)x;
		t.info();
	}
}


class Animal{

}
class Dog extends Animal{

}
class Cat extends Animal{

}
class X {
	public static void main (String []args){
		Animal x = new Cat();
		Dog y = x;
	}
}


class Animal{

}
class Dog extends Animal{

}
class Cat extends Animal{

}
class X {
	public static void main (String []args){
		Animal x = new Cat();
		Dog y = (Dog)x; 	// ClassCastException in RUNTIME
	}
}

class A{
	public static void main(String[]args)
}

